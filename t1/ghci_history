addHyphenSemLambda ""
addHyphenSemLambda "Rio Grande do Sul"
:load t1.hs 
:load t1.hs 
length10 ["palavras","paralelas","pedal","paralelepipedo"]
:load t1.hs 
:load t1.hs 
:load t1.hs 
betterEncodeName "Badtz Maru"
betterEncodeName "Anderson Silva"
:load t1.hs 
:load t1.hs 
charToInt00 'U'
charToInt00 'u'
charToInt00 'A'
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
encodeName "Anderson Silva"
encodeName "Badtz Maru"
:load t1.hs 
encodeName "Badtz Maru"
encodeName "Anderson Silva"
:load t1.hs 
:load t1.hs 
:load t1.hs 
encodeName "abc def"
:load t1.hs 
:load t1.hs 
:load t1.hs 
userName "Francielle Pereira"
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
lastName "JON BON JOVI"
:load t1.hs 
lastName "Fran Pe dsahui"
:load t1.hs 
:load t1.hs 
lastName "Francielle Pereira"
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
endBy ";" "foo;bar;baz;"
splitOn "x" "axbxc"
:load t1.hs 
:load t1.hs 
isInt "123"
isInt "123aaa"
isInt "aaa"
:load t1.hs 
:load t1.hs 
isInt "aaa"
isInt "123aaa"
:load t1.hs 
isInt "123aaa"
isInt "aaa"
isInt "123a"
isInt "32132 1232"
isInt "32132"
:load t1.hs 
isInt "32132"
isInt "32132"
isInt "32132 "
isInt "dsada 2da 4 2014a"
:load t1.hs 
:load t1.hs 
:load t1.hs 
:load t1.hs 
firstName "lalal aaa"
:load t1.hs
addHyphen "aa bb c AAA"
addHyphen "Francielle Prerira"
:load t1.hs
:load t1.hs
:load t1.hs
:load t1.hs
:load t1.hs
removeVowel "Francielle Perira"
:load t1.hs
removeVowel "Francielle"
removeVowel "Francielle Pereira"
removeVowel "Francielle Perera"
removeVowelSemLambda "francielle Pereira"
:load t1.hs
removeVowel "Francielle"
:load t1.hs
:load t1.hs
:load t1.hs
removeVowel "Fran"
removeVowel Fran
:load t1.hs
:load t1.hs
:load t1.hs
removeVowel "Francielle"
removeVowel "Francielle"
:load t1.hs
:load t1.hs
:load t1.hs
:load t1.hs
not (elem "ae" "tesate")
 'a'  `elem`  "tesate"
not (elem 'a' "tesate")
elem 'a' "tesate"
elem 'a' "teste"
elem a "teste"
removeVowel "Francielle"
removeVowel Francielle
:load t1.hs
htmlListItemsSemLambda ["abra", "ca", "dabra"]
:load t1.hs
:load t1.hs
htmlListItems ["abra", "ca", "dabra"]
:load t1.hs
addComma ["Fran", "P", "lalalal duhas"]
:load t1.hs
:load t1.hs
isVowel 'A'
isVowel 'a'
isVowel 'b'
:load t1.hs
isVowel 'b'
isVowel 'B'
isVowel 'a'
:load t1.hs
:load t1.hs
isVowel 'A'
isVowel 'D'
isVowel 'a'
isVowel 'd'
:load t1.hs
:load t1.hs
isVowel 'd'
:load ex1.hs
takeWhile (/= mod 2) [1,2,3,4,5]
takeWhile (mod n 2 == 0) [1,2,3,4,5]
takeWhile (mod 2 == 0) [1,2,3,4,5]
:load ex1.hs
takeWhile (mod 2 == 0) [1,2,3,4,5]
takeWhile (/=' ') "Fulana de Tal"
takeWhile (< 5) [1,2,3,4,5]
:load ex1.hs
:load ex1.hs
isNegative [-1, 3.8, -9.86]
:load ex1.hs
:load ex1.hs
:load ex1.hs
:load ex1.hs
:load ex1.hs
countSpaces "lala fasuh sdas"
:load ex1.hs
:load ex1.hs
countSpaces "lala fasuh sdas"
returnSpaces "la la"
returnSpaces "la la"
countSpaces "lala fasuh sdas"
:load ex1.hs
:load ex1.hs
:load ex1.hs
:load ex1.hs
:load ex1.hs
:load ex1.hs
:load ex1.hs
:load ex1.hs
:load ex1.hs
:load ex1.hs
:load ex1.hs
:load ex1.hs
:load ex1.hs
